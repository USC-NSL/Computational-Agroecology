// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: agent_server.proto
#ifndef GRPC_agent_5fserver_2eproto__INCLUDED
#define GRPC_agent_5fserver_2eproto__INCLUDED

#include "agent_server.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace agent_server {
namespace service {

class AgentServer final {
 public:
  static constexpr char const* service_full_name() {
    return "agent_server.service.AgentServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateEnvironment(::grpc::ClientContext* context, const ::agent_server::service::CreateEnvironmentRequest& request, ::agent_server::service::CreateEnvironmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::CreateEnvironmentResponse>> AsyncCreateEnvironment(::grpc::ClientContext* context, const ::agent_server::service::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::CreateEnvironmentResponse>>(AsyncCreateEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::CreateEnvironmentResponse>> PrepareAsyncCreateEnvironment(::grpc::ClientContext* context, const ::agent_server::service::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::CreateEnvironmentResponse>>(PrepareAsyncCreateEnvironmentRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateAgent(::grpc::ClientContext* context, const ::agent_server::service::CreateAgentRequest& request, ::agent_server::service::CreateAgentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::CreateAgentResponse>> AsyncCreateAgent(::grpc::ClientContext* context, const ::agent_server::service::CreateAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::CreateAgentResponse>>(AsyncCreateAgentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::CreateAgentResponse>> PrepareAsyncCreateAgent(::grpc::ClientContext* context, const ::agent_server::service::CreateAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::CreateAgentResponse>>(PrepareAsyncCreateAgentRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEnvironment(::grpc::ClientContext* context, const ::agent_server::service::GetEnvironmentRequest& request, ::agent_server::service::GetEnvironmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::GetEnvironmentResponse>> AsyncGetEnvironment(::grpc::ClientContext* context, const ::agent_server::service::GetEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::GetEnvironmentResponse>>(AsyncGetEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::GetEnvironmentResponse>> PrepareAsyncGetEnvironment(::grpc::ClientContext* context, const ::agent_server::service::GetEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::GetEnvironmentResponse>>(PrepareAsyncGetEnvironmentRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateEnvironment(::grpc::ClientContext* context, const ::agent_server::service::CreateEnvironmentRequest* request, ::agent_server::service::CreateEnvironmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAgent(::grpc::ClientContext* context, const ::agent_server::service::CreateAgentRequest* request, ::agent_server::service::CreateAgentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEnvironment(::grpc::ClientContext* context, const ::agent_server::service::GetEnvironmentRequest* request, ::agent_server::service::GetEnvironmentResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::CreateEnvironmentResponse>* AsyncCreateEnvironmentRaw(::grpc::ClientContext* context, const ::agent_server::service::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::CreateEnvironmentResponse>* PrepareAsyncCreateEnvironmentRaw(::grpc::ClientContext* context, const ::agent_server::service::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::CreateAgentResponse>* AsyncCreateAgentRaw(::grpc::ClientContext* context, const ::agent_server::service::CreateAgentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::CreateAgentResponse>* PrepareAsyncCreateAgentRaw(::grpc::ClientContext* context, const ::agent_server::service::CreateAgentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::GetEnvironmentResponse>* AsyncGetEnvironmentRaw(::grpc::ClientContext* context, const ::agent_server::service::GetEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent_server::service::GetEnvironmentResponse>* PrepareAsyncGetEnvironmentRaw(::grpc::ClientContext* context, const ::agent_server::service::GetEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateEnvironment(::grpc::ClientContext* context, const ::agent_server::service::CreateEnvironmentRequest& request, ::agent_server::service::CreateEnvironmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent_server::service::CreateEnvironmentResponse>> AsyncCreateEnvironment(::grpc::ClientContext* context, const ::agent_server::service::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent_server::service::CreateEnvironmentResponse>>(AsyncCreateEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent_server::service::CreateEnvironmentResponse>> PrepareAsyncCreateEnvironment(::grpc::ClientContext* context, const ::agent_server::service::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent_server::service::CreateEnvironmentResponse>>(PrepareAsyncCreateEnvironmentRaw(context, request, cq));
    }
    ::grpc::Status CreateAgent(::grpc::ClientContext* context, const ::agent_server::service::CreateAgentRequest& request, ::agent_server::service::CreateAgentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent_server::service::CreateAgentResponse>> AsyncCreateAgent(::grpc::ClientContext* context, const ::agent_server::service::CreateAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent_server::service::CreateAgentResponse>>(AsyncCreateAgentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent_server::service::CreateAgentResponse>> PrepareAsyncCreateAgent(::grpc::ClientContext* context, const ::agent_server::service::CreateAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent_server::service::CreateAgentResponse>>(PrepareAsyncCreateAgentRaw(context, request, cq));
    }
    ::grpc::Status GetEnvironment(::grpc::ClientContext* context, const ::agent_server::service::GetEnvironmentRequest& request, ::agent_server::service::GetEnvironmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent_server::service::GetEnvironmentResponse>> AsyncGetEnvironment(::grpc::ClientContext* context, const ::agent_server::service::GetEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent_server::service::GetEnvironmentResponse>>(AsyncGetEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent_server::service::GetEnvironmentResponse>> PrepareAsyncGetEnvironment(::grpc::ClientContext* context, const ::agent_server::service::GetEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent_server::service::GetEnvironmentResponse>>(PrepareAsyncGetEnvironmentRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateEnvironment(::grpc::ClientContext* context, const ::agent_server::service::CreateEnvironmentRequest* request, ::agent_server::service::CreateEnvironmentResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateAgent(::grpc::ClientContext* context, const ::agent_server::service::CreateAgentRequest* request, ::agent_server::service::CreateAgentResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEnvironment(::grpc::ClientContext* context, const ::agent_server::service::GetEnvironmentRequest* request, ::agent_server::service::GetEnvironmentResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::agent_server::service::CreateEnvironmentResponse>* AsyncCreateEnvironmentRaw(::grpc::ClientContext* context, const ::agent_server::service::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent_server::service::CreateEnvironmentResponse>* PrepareAsyncCreateEnvironmentRaw(::grpc::ClientContext* context, const ::agent_server::service::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent_server::service::CreateAgentResponse>* AsyncCreateAgentRaw(::grpc::ClientContext* context, const ::agent_server::service::CreateAgentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent_server::service::CreateAgentResponse>* PrepareAsyncCreateAgentRaw(::grpc::ClientContext* context, const ::agent_server::service::CreateAgentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent_server::service::GetEnvironmentResponse>* AsyncGetEnvironmentRaw(::grpc::ClientContext* context, const ::agent_server::service::GetEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent_server::service::GetEnvironmentResponse>* PrepareAsyncGetEnvironmentRaw(::grpc::ClientContext* context, const ::agent_server::service::GetEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateEnvironment_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAgent_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEnvironment_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateEnvironment(::grpc::ServerContext* context, const ::agent_server::service::CreateEnvironmentRequest* request, ::agent_server::service::CreateEnvironmentResponse* response);
    virtual ::grpc::Status CreateAgent(::grpc::ServerContext* context, const ::agent_server::service::CreateAgentRequest* request, ::agent_server::service::CreateAgentResponse* response);
    virtual ::grpc::Status GetEnvironment(::grpc::ServerContext* context, const ::agent_server::service::GetEnvironmentRequest* request, ::agent_server::service::GetEnvironmentResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateEnvironment() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnvironment(::grpc::ServerContext* context, const ::agent_server::service::CreateEnvironmentRequest* request, ::agent_server::service::CreateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEnvironment(::grpc::ServerContext* context, ::agent_server::service::CreateEnvironmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent_server::service::CreateEnvironmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateAgent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAgent(::grpc::ServerContext* context, const ::agent_server::service::CreateAgentRequest* request, ::agent_server::service::CreateAgentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAgent(::grpc::ServerContext* context, ::agent_server::service::CreateAgentRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent_server::service::CreateAgentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetEnvironment() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvironment(::grpc::ServerContext* context, const ::agent_server::service::GetEnvironmentRequest* request, ::agent_server::service::GetEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnvironment(::grpc::ServerContext* context, ::agent_server::service::GetEnvironmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent_server::service::GetEnvironmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateEnvironment<WithAsyncMethod_CreateAgent<WithAsyncMethod_GetEnvironment<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateEnvironment() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::agent_server::service::CreateEnvironmentRequest, ::agent_server::service::CreateEnvironmentResponse>(
          [this](::grpc::ServerContext* context,
                 const ::agent_server::service::CreateEnvironmentRequest* request,
                 ::agent_server::service::CreateEnvironmentResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateEnvironment(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CreateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnvironment(::grpc::ServerContext* context, const ::agent_server::service::CreateEnvironmentRequest* request, ::agent_server::service::CreateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateEnvironment(::grpc::ServerContext* context, const ::agent_server::service::CreateEnvironmentRequest* request, ::agent_server::service::CreateEnvironmentResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateAgent() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::agent_server::service::CreateAgentRequest, ::agent_server::service::CreateAgentResponse>(
          [this](::grpc::ServerContext* context,
                 const ::agent_server::service::CreateAgentRequest* request,
                 ::agent_server::service::CreateAgentResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateAgent(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CreateAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAgent(::grpc::ServerContext* context, const ::agent_server::service::CreateAgentRequest* request, ::agent_server::service::CreateAgentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateAgent(::grpc::ServerContext* context, const ::agent_server::service::CreateAgentRequest* request, ::agent_server::service::CreateAgentResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetEnvironment() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::agent_server::service::GetEnvironmentRequest, ::agent_server::service::GetEnvironmentResponse>(
          [this](::grpc::ServerContext* context,
                 const ::agent_server::service::GetEnvironmentRequest* request,
                 ::agent_server::service::GetEnvironmentResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetEnvironment(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvironment(::grpc::ServerContext* context, const ::agent_server::service::GetEnvironmentRequest* request, ::agent_server::service::GetEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetEnvironment(::grpc::ServerContext* context, const ::agent_server::service::GetEnvironmentRequest* request, ::agent_server::service::GetEnvironmentResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_CreateEnvironment<ExperimentalWithCallbackMethod_CreateAgent<ExperimentalWithCallbackMethod_GetEnvironment<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateEnvironment() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnvironment(::grpc::ServerContext* context, const ::agent_server::service::CreateEnvironmentRequest* request, ::agent_server::service::CreateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateAgent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAgent(::grpc::ServerContext* context, const ::agent_server::service::CreateAgentRequest* request, ::agent_server::service::CreateAgentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetEnvironment() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvironment(::grpc::ServerContext* context, const ::agent_server::service::GetEnvironmentRequest* request, ::agent_server::service::GetEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateEnvironment() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnvironment(::grpc::ServerContext* context, const ::agent_server::service::CreateEnvironmentRequest* request, ::agent_server::service::CreateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEnvironment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateAgent() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAgent(::grpc::ServerContext* context, const ::agent_server::service::CreateAgentRequest* request, ::agent_server::service::CreateAgentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAgent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetEnvironment() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvironment(::grpc::ServerContext* context, const ::agent_server::service::GetEnvironmentRequest* request, ::agent_server::service::GetEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnvironment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateEnvironment() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateEnvironment(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnvironment(::grpc::ServerContext* context, const ::agent_server::service::CreateEnvironmentRequest* request, ::agent_server::service::CreateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateEnvironment(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateAgent() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateAgent(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAgent(::grpc::ServerContext* context, const ::agent_server::service::CreateAgentRequest* request, ::agent_server::service::CreateAgentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateAgent(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetEnvironment() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetEnvironment(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvironment(::grpc::ServerContext* context, const ::agent_server::service::GetEnvironmentRequest* request, ::agent_server::service::GetEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetEnvironment(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateEnvironment() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::agent_server::service::CreateEnvironmentRequest, ::agent_server::service::CreateEnvironmentResponse>(std::bind(&WithStreamedUnaryMethod_CreateEnvironment<BaseClass>::StreamedCreateEnvironment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateEnvironment(::grpc::ServerContext* context, const ::agent_server::service::CreateEnvironmentRequest* request, ::agent_server::service::CreateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateEnvironment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent_server::service::CreateEnvironmentRequest,::agent_server::service::CreateEnvironmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateAgent() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::agent_server::service::CreateAgentRequest, ::agent_server::service::CreateAgentResponse>(std::bind(&WithStreamedUnaryMethod_CreateAgent<BaseClass>::StreamedCreateAgent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAgent(::grpc::ServerContext* context, const ::agent_server::service::CreateAgentRequest* request, ::agent_server::service::CreateAgentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAgent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent_server::service::CreateAgentRequest,::agent_server::service::CreateAgentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetEnvironment() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::agent_server::service::GetEnvironmentRequest, ::agent_server::service::GetEnvironmentResponse>(std::bind(&WithStreamedUnaryMethod_GetEnvironment<BaseClass>::StreamedGetEnvironment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEnvironment(::grpc::ServerContext* context, const ::agent_server::service::GetEnvironmentRequest* request, ::agent_server::service::GetEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEnvironment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent_server::service::GetEnvironmentRequest,::agent_server::service::GetEnvironmentResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateEnvironment<WithStreamedUnaryMethod_CreateAgent<WithStreamedUnaryMethod_GetEnvironment<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateEnvironment<WithStreamedUnaryMethod_CreateAgent<WithStreamedUnaryMethod_GetEnvironment<Service > > > StreamedService;
};

}  // namespace service
}  // namespace agent_server


#endif  // GRPC_agent_5fserver_2eproto__INCLUDED
