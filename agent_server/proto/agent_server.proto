syntax = "proto3";

import "environment.proto";

package agent_server.service;

message CreateEnvironmentRequest {
  string name = 1;
  data_format.Config config = 2;
  fixed64 timestamp_epoch_count = 3;
  fixed64 time_step_epoch_count = 4;
  fixed64 terrain_size = 5;
}

// Empty since sucess/failure is signaled via gRPC status.
message CreateEnvironmentResponse {}

message DeleteEnvironmentRequest {
  string name = 1;
}

// Empty since sucess/failure is signaled via gRPC status.
message DeleteEnvironmentResponse {}

message CreateQLearningAgentRequest {
  string agent_name = 1;
  string environment_name = 2;
  int64 row = 3;
  int64 col = 4;
}

// Empty since sucess/failure is signaled via gRPC status.
message CreateQLearningAgentResponse {}

message DeleteAgentRequest {
  string name = 1;
}

// Empty since sucess/failure is signaled via gRPC status.
message DeleteAgentResponse {}

message GetEnvironmentRequest {
  string name = 1;
}

message GetEnvironmentResponse {
  data_format.Environment environment = 1;
}

message SimulateToTimeStepRequest {
  string environment_name = 1;
  sint64 time_step = 2;
}

// Empty since sucess/failure is signaled via gRPC status.
message SimulateToTimeStepResponse {}

message AgentActionConfig {
  message Cost {
    enum ResourceType {
      MONEY = 0;
      LABOR = 1;
    }

    ResourceType resource_type = 1;
    uint64 count = 2;
  }

  repeated data_format.Coordinate applied_range = 1;
  sint64 start_time_step = 2;
  sint64 end_time_step = 3;
  repeated Cost cost = 4;
}

message AgentAddCropRequest {
  string agent_name = 1;
  AgentActionConfig action_config = 2;
  string crop_type_name = 3;
}

// Empty since sucess/failure is signaled via gRPC status.
message AgentAddCropResponse {}

message AgentRemoveCropRequest {
  string agent_name = 1;
  AgentActionConfig action_config = 2;
}

// Empty since sucess/failure is signaled via gRPC status.
message AgentRemoveCropResponse {}

service AgentServer {
  rpc CreateEnvironment (CreateEnvironmentRequest) returns (CreateEnvironmentResponse);
  rpc DeleteEnvironment (DeleteEnvironmentRequest) returns (DeleteEnvironmentResponse);
  rpc CreateQLearningAgent (CreateQLearningAgentRequest) returns (CreateQLearningAgentResponse);
  rpc DeleteAgent (DeleteAgentRequest) returns (DeleteAgentResponse);
  rpc GetEnvironment (GetEnvironmentRequest) returns (GetEnvironmentResponse);
  rpc SimulateToTimeStep (SimulateToTimeStepRequest) returns (SimulateToTimeStepResponse);
  rpc AgentAddCrop (AgentAddCropRequest) returns (AgentAddCropResponse);
  rpc AgentRemoveCrop (AgentRemoveCropRequest) returns (AgentRemoveCropResponse);
}