// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: environment.proto

#ifndef PROTOBUF_INCLUDED_environment_2eproto
#define PROTOBUF_INCLUDED_environment_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_environment_2eproto 

namespace protobuf_environment_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_environment_2eproto
namespace data_format {
class Climate;
class ClimateDefaultTypeInternal;
extern ClimateDefaultTypeInternal _Climate_default_instance_;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Environment;
class EnvironmentDefaultTypeInternal;
extern EnvironmentDefaultTypeInternal _Environment_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class MaxMinDoublePair;
class MaxMinDoublePairDefaultTypeInternal;
extern MaxMinDoublePairDefaultTypeInternal _MaxMinDoublePair_default_instance_;
class Plant;
class PlantDefaultTypeInternal;
extern PlantDefaultTypeInternal _Plant_default_instance_;
class Soil;
class SoilDefaultTypeInternal;
extern SoilDefaultTypeInternal _Soil_default_instance_;
class Soil_Nutrients;
class Soil_NutrientsDefaultTypeInternal;
extern Soil_NutrientsDefaultTypeInternal _Soil_Nutrients_default_instance_;
class Terrain;
class TerrainDefaultTypeInternal;
extern TerrainDefaultTypeInternal _Terrain_default_instance_;
class Terrain_Cell;
class Terrain_CellDefaultTypeInternal;
extern Terrain_CellDefaultTypeInternal _Terrain_Cell_default_instance_;
class Terrain_Row;
class Terrain_RowDefaultTypeInternal;
extern Terrain_RowDefaultTypeInternal _Terrain_Row_default_instance_;
class Weather;
class WeatherDefaultTypeInternal;
extern WeatherDefaultTypeInternal _Weather_default_instance_;
}  // namespace data_format
namespace google {
namespace protobuf {
template<> ::data_format::Climate* Arena::CreateMaybeMessage<::data_format::Climate>(Arena*);
template<> ::data_format::Config* Arena::CreateMaybeMessage<::data_format::Config>(Arena*);
template<> ::data_format::Environment* Arena::CreateMaybeMessage<::data_format::Environment>(Arena*);
template<> ::data_format::Location* Arena::CreateMaybeMessage<::data_format::Location>(Arena*);
template<> ::data_format::MaxMinDoublePair* Arena::CreateMaybeMessage<::data_format::MaxMinDoublePair>(Arena*);
template<> ::data_format::Plant* Arena::CreateMaybeMessage<::data_format::Plant>(Arena*);
template<> ::data_format::Soil* Arena::CreateMaybeMessage<::data_format::Soil>(Arena*);
template<> ::data_format::Soil_Nutrients* Arena::CreateMaybeMessage<::data_format::Soil_Nutrients>(Arena*);
template<> ::data_format::Terrain* Arena::CreateMaybeMessage<::data_format::Terrain>(Arena*);
template<> ::data_format::Terrain_Cell* Arena::CreateMaybeMessage<::data_format::Terrain_Cell>(Arena*);
template<> ::data_format::Terrain_Row* Arena::CreateMaybeMessage<::data_format::Terrain_Row>(Arena*);
template<> ::data_format::Weather* Arena::CreateMaybeMessage<::data_format::Weather>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace data_format {

enum Climate_ZoneType {
  Climate_ZoneType_TropicalWetAndDry = 0,
  Climate_ZoneType_TropicalWet = 1,
  Climate_ZoneType_DesertOrArid = 2,
  Climate_ZoneType_SteppeOrSemiArid = 3,
  Climate_ZoneType_SubtropicalHumid = 4,
  Climate_ZoneType_SubtropicalDrySummer = 5,
  Climate_ZoneType_SubtropicalDryWinter = 6,
  Climate_ZoneType_TemperateOceanic = 7,
  Climate_ZoneType_TemperateContinental = 8,
  Climate_ZoneType_TemperateWithHumidWinters = 9,
  Climate_ZoneType_TemperateWithDryWinters = 10,
  Climate_ZoneType_Boreal = 11,
  Climate_ZoneType_Polar = 12,
  Climate_ZoneType_Climate_ZoneType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Climate_ZoneType_Climate_ZoneType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Climate_ZoneType_IsValid(int value);
const Climate_ZoneType Climate_ZoneType_ZoneType_MIN = Climate_ZoneType_TropicalWetAndDry;
const Climate_ZoneType Climate_ZoneType_ZoneType_MAX = Climate_ZoneType_Polar;
const int Climate_ZoneType_ZoneType_ARRAYSIZE = Climate_ZoneType_ZoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Climate_ZoneType_descriptor();
inline const ::std::string& Climate_ZoneType_Name(Climate_ZoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Climate_ZoneType_descriptor(), value);
}
inline bool Climate_ZoneType_Parse(
    const ::std::string& name, Climate_ZoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Climate_ZoneType>(
    Climate_ZoneType_descriptor(), name, value);
}
enum Plant_Maturity {
  Plant_Maturity_SEED = 0,
  Plant_Maturity_SEEDLING = 1,
  Plant_Maturity_JUVENILE = 2,
  Plant_Maturity_MATURE = 3,
  Plant_Maturity_OLD = 4,
  Plant_Maturity_Plant_Maturity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Plant_Maturity_Plant_Maturity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Plant_Maturity_IsValid(int value);
const Plant_Maturity Plant_Maturity_Maturity_MIN = Plant_Maturity_SEED;
const Plant_Maturity Plant_Maturity_Maturity_MAX = Plant_Maturity_OLD;
const int Plant_Maturity_Maturity_ARRAYSIZE = Plant_Maturity_Maturity_MAX + 1;

const ::google::protobuf::EnumDescriptor* Plant_Maturity_descriptor();
inline const ::std::string& Plant_Maturity_Name(Plant_Maturity value) {
  return ::google::protobuf::internal::NameOfEnum(
    Plant_Maturity_descriptor(), value);
}
inline bool Plant_Maturity_Parse(
    const ::std::string& name, Plant_Maturity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Plant_Maturity>(
    Plant_Maturity_descriptor(), name, value);
}
enum Soil_Texture {
  Soil_Texture_CLAY = 0,
  Soil_Texture_SILT = 1,
  Soil_Texture_SAND = 2,
  Soil_Texture_Soil_Texture_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Soil_Texture_Soil_Texture_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Soil_Texture_IsValid(int value);
const Soil_Texture Soil_Texture_Texture_MIN = Soil_Texture_CLAY;
const Soil_Texture Soil_Texture_Texture_MAX = Soil_Texture_SAND;
const int Soil_Texture_Texture_ARRAYSIZE = Soil_Texture_Texture_MAX + 1;

const ::google::protobuf::EnumDescriptor* Soil_Texture_descriptor();
inline const ::std::string& Soil_Texture_Name(Soil_Texture value) {
  return ::google::protobuf::internal::NameOfEnum(
    Soil_Texture_descriptor(), value);
}
inline bool Soil_Texture_Parse(
    const ::std::string& name, Soil_Texture* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Soil_Texture>(
    Soil_Texture_descriptor(), name, value);
}
// ===================================================================

class MaxMinDoublePair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_format.MaxMinDoublePair) */ {
 public:
  MaxMinDoublePair();
  virtual ~MaxMinDoublePair();

  MaxMinDoublePair(const MaxMinDoublePair& from);

  inline MaxMinDoublePair& operator=(const MaxMinDoublePair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaxMinDoublePair(MaxMinDoublePair&& from) noexcept
    : MaxMinDoublePair() {
    *this = ::std::move(from);
  }

  inline MaxMinDoublePair& operator=(MaxMinDoublePair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxMinDoublePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaxMinDoublePair* internal_default_instance() {
    return reinterpret_cast<const MaxMinDoublePair*>(
               &_MaxMinDoublePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MaxMinDoublePair* other);
  friend void swap(MaxMinDoublePair& a, MaxMinDoublePair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaxMinDoublePair* New() const final {
    return CreateMaybeMessage<MaxMinDoublePair>(NULL);
  }

  MaxMinDoublePair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaxMinDoublePair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaxMinDoublePair& from);
  void MergeFrom(const MaxMinDoublePair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaxMinDoublePair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double max = 1;
  void clear_max();
  static const int kMaxFieldNumber = 1;
  double max() const;
  void set_max(double value);

  // double min = 2;
  void clear_min();
  static const int kMinFieldNumber = 2;
  double min() const;
  void set_min(double value);

  // @@protoc_insertion_point(class_scope:data_format.MaxMinDoublePair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double max_;
  double min_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_environment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_format.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Location* other);
  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(NULL);
  }

  Location* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double longitude_left = 1;
  void clear_longitude_left();
  static const int kLongitudeLeftFieldNumber = 1;
  double longitude_left() const;
  void set_longitude_left(double value);

  // double longitude_right = 2;
  void clear_longitude_right();
  static const int kLongitudeRightFieldNumber = 2;
  double longitude_right() const;
  void set_longitude_right(double value);

  // double latitude_top = 3;
  void clear_latitude_top();
  static const int kLatitudeTopFieldNumber = 3;
  double latitude_top() const;
  void set_latitude_top(double value);

  // double latitude_bottom = 4;
  void clear_latitude_bottom();
  static const int kLatitudeBottomFieldNumber = 4;
  double latitude_bottom() const;
  void set_latitude_bottom(double value);

  // @@protoc_insertion_point(class_scope:data_format.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double longitude_left_;
  double longitude_right_;
  double latitude_top_;
  double latitude_bottom_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_environment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_format.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(NULL);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .data_format.Location location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  private:
  const ::data_format::Location& _internal_location() const;
  public:
  const ::data_format::Location& location() const;
  ::data_format::Location* release_location();
  ::data_format::Location* mutable_location();
  void set_allocated_location(::data_format::Location* location);

  // @@protoc_insertion_point(class_scope:data_format.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::data_format::Location* location_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_environment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Climate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_format.Climate) */ {
 public:
  Climate();
  virtual ~Climate();

  Climate(const Climate& from);

  inline Climate& operator=(const Climate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Climate(Climate&& from) noexcept
    : Climate() {
    *this = ::std::move(from);
  }

  inline Climate& operator=(Climate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Climate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Climate* internal_default_instance() {
    return reinterpret_cast<const Climate*>(
               &_Climate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Climate* other);
  friend void swap(Climate& a, Climate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Climate* New() const final {
    return CreateMaybeMessage<Climate>(NULL);
  }

  Climate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Climate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Climate& from);
  void MergeFrom(const Climate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Climate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Climate_ZoneType ZoneType;
  static const ZoneType TropicalWetAndDry =
    Climate_ZoneType_TropicalWetAndDry;
  static const ZoneType TropicalWet =
    Climate_ZoneType_TropicalWet;
  static const ZoneType DesertOrArid =
    Climate_ZoneType_DesertOrArid;
  static const ZoneType SteppeOrSemiArid =
    Climate_ZoneType_SteppeOrSemiArid;
  static const ZoneType SubtropicalHumid =
    Climate_ZoneType_SubtropicalHumid;
  static const ZoneType SubtropicalDrySummer =
    Climate_ZoneType_SubtropicalDrySummer;
  static const ZoneType SubtropicalDryWinter =
    Climate_ZoneType_SubtropicalDryWinter;
  static const ZoneType TemperateOceanic =
    Climate_ZoneType_TemperateOceanic;
  static const ZoneType TemperateContinental =
    Climate_ZoneType_TemperateContinental;
  static const ZoneType TemperateWithHumidWinters =
    Climate_ZoneType_TemperateWithHumidWinters;
  static const ZoneType TemperateWithDryWinters =
    Climate_ZoneType_TemperateWithDryWinters;
  static const ZoneType Boreal =
    Climate_ZoneType_Boreal;
  static const ZoneType Polar =
    Climate_ZoneType_Polar;
  static inline bool ZoneType_IsValid(int value) {
    return Climate_ZoneType_IsValid(value);
  }
  static const ZoneType ZoneType_MIN =
    Climate_ZoneType_ZoneType_MIN;
  static const ZoneType ZoneType_MAX =
    Climate_ZoneType_ZoneType_MAX;
  static const int ZoneType_ARRAYSIZE =
    Climate_ZoneType_ZoneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ZoneType_descriptor() {
    return Climate_ZoneType_descriptor();
  }
  static inline const ::std::string& ZoneType_Name(ZoneType value) {
    return Climate_ZoneType_Name(value);
  }
  static inline bool ZoneType_Parse(const ::std::string& name,
      ZoneType* value) {
    return Climate_ZoneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .data_format.MaxMinDoublePair yearly_temperature = 2;
  bool has_yearly_temperature() const;
  void clear_yearly_temperature();
  static const int kYearlyTemperatureFieldNumber = 2;
  private:
  const ::data_format::MaxMinDoublePair& _internal_yearly_temperature() const;
  public:
  const ::data_format::MaxMinDoublePair& yearly_temperature() const;
  ::data_format::MaxMinDoublePair* release_yearly_temperature();
  ::data_format::MaxMinDoublePair* mutable_yearly_temperature();
  void set_allocated_yearly_temperature(::data_format::MaxMinDoublePair* yearly_temperature);

  // .data_format.MaxMinDoublePair yearly_rainfall = 3;
  bool has_yearly_rainfall() const;
  void clear_yearly_rainfall();
  static const int kYearlyRainfallFieldNumber = 3;
  private:
  const ::data_format::MaxMinDoublePair& _internal_yearly_rainfall() const;
  public:
  const ::data_format::MaxMinDoublePair& yearly_rainfall() const;
  ::data_format::MaxMinDoublePair* release_yearly_rainfall();
  ::data_format::MaxMinDoublePair* mutable_yearly_rainfall();
  void set_allocated_yearly_rainfall(::data_format::MaxMinDoublePair* yearly_rainfall);

  // .data_format.Climate.ZoneType climate_zone = 1;
  void clear_climate_zone();
  static const int kClimateZoneFieldNumber = 1;
  ::data_format::Climate_ZoneType climate_zone() const;
  void set_climate_zone(::data_format::Climate_ZoneType value);

  // @@protoc_insertion_point(class_scope:data_format.Climate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::data_format::MaxMinDoublePair* yearly_temperature_;
  ::data_format::MaxMinDoublePair* yearly_rainfall_;
  int climate_zone_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_environment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plant : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_format.Plant) */ {
 public:
  Plant();
  virtual ~Plant();

  Plant(const Plant& from);

  inline Plant& operator=(const Plant& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Plant(Plant&& from) noexcept
    : Plant() {
    *this = ::std::move(from);
  }

  inline Plant& operator=(Plant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Plant& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Plant* internal_default_instance() {
    return reinterpret_cast<const Plant*>(
               &_Plant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Plant* other);
  friend void swap(Plant& a, Plant& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Plant* New() const final {
    return CreateMaybeMessage<Plant>(NULL);
  }

  Plant* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Plant>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Plant& from);
  void MergeFrom(const Plant& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plant* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Plant_Maturity Maturity;
  static const Maturity SEED =
    Plant_Maturity_SEED;
  static const Maturity SEEDLING =
    Plant_Maturity_SEEDLING;
  static const Maturity JUVENILE =
    Plant_Maturity_JUVENILE;
  static const Maturity MATURE =
    Plant_Maturity_MATURE;
  static const Maturity OLD =
    Plant_Maturity_OLD;
  static inline bool Maturity_IsValid(int value) {
    return Plant_Maturity_IsValid(value);
  }
  static const Maturity Maturity_MIN =
    Plant_Maturity_Maturity_MIN;
  static const Maturity Maturity_MAX =
    Plant_Maturity_Maturity_MAX;
  static const int Maturity_ARRAYSIZE =
    Plant_Maturity_Maturity_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Maturity_descriptor() {
    return Plant_Maturity_descriptor();
  }
  static inline const ::std::string& Maturity_Name(Maturity value) {
    return Plant_Maturity_Name(value);
  }
  static inline bool Maturity_Parse(const ::std::string& name,
      Maturity* value) {
    return Plant_Maturity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int64 gdd_thresholds = 7;
  int gdd_thresholds_size() const;
  void clear_gdd_thresholds();
  static const int kGddThresholdsFieldNumber = 7;
  ::google::protobuf::int64 gdd_thresholds(int index) const;
  void set_gdd_thresholds(int index, ::google::protobuf::int64 value);
  void add_gdd_thresholds(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      gdd_thresholds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_gdd_thresholds();

  // string type_name = 1;
  void clear_type_name();
  static const int kTypeNameFieldNumber = 1;
  const ::std::string& type_name() const;
  void set_type_name(const ::std::string& value);
  #if LANG_CXX11
  void set_type_name(::std::string&& value);
  #endif
  void set_type_name(const char* value);
  void set_type_name(const char* value, size_t size);
  ::std::string* mutable_type_name();
  ::std::string* release_type_name();
  void set_allocated_type_name(::std::string* type_name);

  // uint32 health = 2;
  void clear_health();
  static const int kHealthFieldNumber = 2;
  ::google::protobuf::uint32 health() const;
  void set_health(::google::protobuf::uint32 value);

  // bool flowering = 3;
  void clear_flowering();
  static const int kFloweringFieldNumber = 3;
  bool flowering() const;
  void set_flowering(bool value);

  // int64 accumulated_gdd = 4;
  void clear_accumulated_gdd();
  static const int kAccumulatedGddFieldNumber = 4;
  ::google::protobuf::int64 accumulated_gdd() const;
  void set_accumulated_gdd(::google::protobuf::int64 value);

  // double base_temperature = 6;
  void clear_base_temperature();
  static const int kBaseTemperatureFieldNumber = 6;
  double base_temperature() const;
  void set_base_temperature(double value);

  // .data_format.Plant.Maturity maturity = 5;
  void clear_maturity();
  static const int kMaturityFieldNumber = 5;
  ::data_format::Plant_Maturity maturity() const;
  void set_maturity(::data_format::Plant_Maturity value);

  // @@protoc_insertion_point(class_scope:data_format.Plant)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > gdd_thresholds_;
  mutable int _gdd_thresholds_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr type_name_;
  ::google::protobuf::uint32 health_;
  bool flowering_;
  ::google::protobuf::int64 accumulated_gdd_;
  double base_temperature_;
  int maturity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_environment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Soil_Nutrients : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_format.Soil.Nutrients) */ {
 public:
  Soil_Nutrients();
  virtual ~Soil_Nutrients();

  Soil_Nutrients(const Soil_Nutrients& from);

  inline Soil_Nutrients& operator=(const Soil_Nutrients& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Soil_Nutrients(Soil_Nutrients&& from) noexcept
    : Soil_Nutrients() {
    *this = ::std::move(from);
  }

  inline Soil_Nutrients& operator=(Soil_Nutrients&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Soil_Nutrients& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Soil_Nutrients* internal_default_instance() {
    return reinterpret_cast<const Soil_Nutrients*>(
               &_Soil_Nutrients_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Soil_Nutrients* other);
  friend void swap(Soil_Nutrients& a, Soil_Nutrients& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Soil_Nutrients* New() const final {
    return CreateMaybeMessage<Soil_Nutrients>(NULL);
  }

  Soil_Nutrients* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Soil_Nutrients>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Soil_Nutrients& from);
  void MergeFrom(const Soil_Nutrients& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Soil_Nutrients* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double nitrogen = 1;
  void clear_nitrogen();
  static const int kNitrogenFieldNumber = 1;
  double nitrogen() const;
  void set_nitrogen(double value);

  // double phosphorus = 2;
  void clear_phosphorus();
  static const int kPhosphorusFieldNumber = 2;
  double phosphorus() const;
  void set_phosphorus(double value);

  // double potassium = 3;
  void clear_potassium();
  static const int kPotassiumFieldNumber = 3;
  double potassium() const;
  void set_potassium(double value);

  // double calcium = 4;
  void clear_calcium();
  static const int kCalciumFieldNumber = 4;
  double calcium() const;
  void set_calcium(double value);

  // double magnesium = 5;
  void clear_magnesium();
  static const int kMagnesiumFieldNumber = 5;
  double magnesium() const;
  void set_magnesium(double value);

  // double sulfur = 6;
  void clear_sulfur();
  static const int kSulfurFieldNumber = 6;
  double sulfur() const;
  void set_sulfur(double value);

  // @@protoc_insertion_point(class_scope:data_format.Soil.Nutrients)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double nitrogen_;
  double phosphorus_;
  double potassium_;
  double calcium_;
  double magnesium_;
  double sulfur_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_environment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Soil : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_format.Soil) */ {
 public:
  Soil();
  virtual ~Soil();

  Soil(const Soil& from);

  inline Soil& operator=(const Soil& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Soil(Soil&& from) noexcept
    : Soil() {
    *this = ::std::move(from);
  }

  inline Soil& operator=(Soil&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Soil& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Soil* internal_default_instance() {
    return reinterpret_cast<const Soil*>(
               &_Soil_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Soil* other);
  friend void swap(Soil& a, Soil& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Soil* New() const final {
    return CreateMaybeMessage<Soil>(NULL);
  }

  Soil* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Soil>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Soil& from);
  void MergeFrom(const Soil& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Soil* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Soil_Nutrients Nutrients;

  typedef Soil_Texture Texture;
  static const Texture CLAY =
    Soil_Texture_CLAY;
  static const Texture SILT =
    Soil_Texture_SILT;
  static const Texture SAND =
    Soil_Texture_SAND;
  static inline bool Texture_IsValid(int value) {
    return Soil_Texture_IsValid(value);
  }
  static const Texture Texture_MIN =
    Soil_Texture_Texture_MIN;
  static const Texture Texture_MAX =
    Soil_Texture_Texture_MAX;
  static const int Texture_ARRAYSIZE =
    Soil_Texture_Texture_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Texture_descriptor() {
    return Soil_Texture_descriptor();
  }
  static inline const ::std::string& Texture_Name(Texture value) {
    return Soil_Texture_Name(value);
  }
  static inline bool Texture_Parse(const ::std::string& name,
      Texture* value) {
    return Soil_Texture_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // double pH = 2;
  void clear_ph();
  static const int kPHFieldNumber = 2;
  double ph() const;
  void set_ph(double value);

  // double salinity = 3;
  void clear_salinity();
  static const int kSalinityFieldNumber = 3;
  double salinity() const;
  void set_salinity(double value);

  // double organic_matter = 4;
  void clear_organic_matter();
  static const int kOrganicMatterFieldNumber = 4;
  double organic_matter() const;
  void set_organic_matter(double value);

  // double water_content = 5;
  void clear_water_content();
  static const int kWaterContentFieldNumber = 5;
  double water_content() const;
  void set_water_content(double value);

  // .data_format.Soil.Texture texture = 1;
  void clear_texture();
  static const int kTextureFieldNumber = 1;
  ::data_format::Soil_Texture texture() const;
  void set_texture(::data_format::Soil_Texture value);

  // @@protoc_insertion_point(class_scope:data_format.Soil)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double ph_;
  double salinity_;
  double organic_matter_;
  double water_content_;
  int texture_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_environment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Terrain_Cell : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_format.Terrain.Cell) */ {
 public:
  Terrain_Cell();
  virtual ~Terrain_Cell();

  Terrain_Cell(const Terrain_Cell& from);

  inline Terrain_Cell& operator=(const Terrain_Cell& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Terrain_Cell(Terrain_Cell&& from) noexcept
    : Terrain_Cell() {
    *this = ::std::move(from);
  }

  inline Terrain_Cell& operator=(Terrain_Cell&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Terrain_Cell& default_instance();

  enum OneofPlantCase {
    kPlant = 2,
    ONEOF_PLANT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Terrain_Cell* internal_default_instance() {
    return reinterpret_cast<const Terrain_Cell*>(
               &_Terrain_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Terrain_Cell* other);
  friend void swap(Terrain_Cell& a, Terrain_Cell& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Terrain_Cell* New() const final {
    return CreateMaybeMessage<Terrain_Cell>(NULL);
  }

  Terrain_Cell* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Terrain_Cell>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Terrain_Cell& from);
  void MergeFrom(const Terrain_Cell& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Terrain_Cell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .data_format.Soil soil = 3;
  bool has_soil() const;
  void clear_soil();
  static const int kSoilFieldNumber = 3;
  private:
  const ::data_format::Soil& _internal_soil() const;
  public:
  const ::data_format::Soil& soil() const;
  ::data_format::Soil* release_soil();
  ::data_format::Soil* mutable_soil();
  void set_allocated_soil(::data_format::Soil* soil);

  // uint64 size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // .data_format.Plant plant = 2;
  bool has_plant() const;
  void clear_plant();
  static const int kPlantFieldNumber = 2;
  private:
  const ::data_format::Plant& _internal_plant() const;
  public:
  const ::data_format::Plant& plant() const;
  ::data_format::Plant* release_plant();
  ::data_format::Plant* mutable_plant();
  void set_allocated_plant(::data_format::Plant* plant);

  void clear_oneof_plant();
  OneofPlantCase oneof_plant_case() const;
  // @@protoc_insertion_point(class_scope:data_format.Terrain.Cell)
 private:
  void set_has_plant();

  inline bool has_oneof_plant() const;
  inline void clear_has_oneof_plant();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::data_format::Soil* soil_;
  ::google::protobuf::uint64 size_;
  union OneofPlantUnion {
    OneofPlantUnion() {}
    ::data_format::Plant* plant_;
  } oneof_plant_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_environment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Terrain_Row : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_format.Terrain.Row) */ {
 public:
  Terrain_Row();
  virtual ~Terrain_Row();

  Terrain_Row(const Terrain_Row& from);

  inline Terrain_Row& operator=(const Terrain_Row& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Terrain_Row(Terrain_Row&& from) noexcept
    : Terrain_Row() {
    *this = ::std::move(from);
  }

  inline Terrain_Row& operator=(Terrain_Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Terrain_Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Terrain_Row* internal_default_instance() {
    return reinterpret_cast<const Terrain_Row*>(
               &_Terrain_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Terrain_Row* other);
  friend void swap(Terrain_Row& a, Terrain_Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Terrain_Row* New() const final {
    return CreateMaybeMessage<Terrain_Row>(NULL);
  }

  Terrain_Row* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Terrain_Row>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Terrain_Row& from);
  void MergeFrom(const Terrain_Row& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Terrain_Row* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .data_format.Terrain.Cell cells = 1;
  int cells_size() const;
  void clear_cells();
  static const int kCellsFieldNumber = 1;
  ::data_format::Terrain_Cell* mutable_cells(int index);
  ::google::protobuf::RepeatedPtrField< ::data_format::Terrain_Cell >*
      mutable_cells();
  const ::data_format::Terrain_Cell& cells(int index) const;
  ::data_format::Terrain_Cell* add_cells();
  const ::google::protobuf::RepeatedPtrField< ::data_format::Terrain_Cell >&
      cells() const;

  // @@protoc_insertion_point(class_scope:data_format.Terrain.Row)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::data_format::Terrain_Cell > cells_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_environment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Terrain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_format.Terrain) */ {
 public:
  Terrain();
  virtual ~Terrain();

  Terrain(const Terrain& from);

  inline Terrain& operator=(const Terrain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Terrain(Terrain&& from) noexcept
    : Terrain() {
    *this = ::std::move(from);
  }

  inline Terrain& operator=(Terrain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Terrain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Terrain* internal_default_instance() {
    return reinterpret_cast<const Terrain*>(
               &_Terrain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Terrain* other);
  friend void swap(Terrain& a, Terrain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Terrain* New() const final {
    return CreateMaybeMessage<Terrain>(NULL);
  }

  Terrain* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Terrain>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Terrain& from);
  void MergeFrom(const Terrain& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Terrain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Terrain_Cell Cell;
  typedef Terrain_Row Row;

  // accessors -------------------------------------------------------

  // repeated .data_format.Terrain.Row tiles = 1;
  int tiles_size() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 1;
  ::data_format::Terrain_Row* mutable_tiles(int index);
  ::google::protobuf::RepeatedPtrField< ::data_format::Terrain_Row >*
      mutable_tiles();
  const ::data_format::Terrain_Row& tiles(int index) const;
  ::data_format::Terrain_Row* add_tiles();
  const ::google::protobuf::RepeatedPtrField< ::data_format::Terrain_Row >&
      tiles() const;

  // @@protoc_insertion_point(class_scope:data_format.Terrain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::data_format::Terrain_Row > tiles_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_environment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Weather : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_format.Weather) */ {
 public:
  Weather();
  virtual ~Weather();

  Weather(const Weather& from);

  inline Weather& operator=(const Weather& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Weather(Weather&& from) noexcept
    : Weather() {
    *this = ::std::move(from);
  }

  inline Weather& operator=(Weather&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Weather& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Weather* internal_default_instance() {
    return reinterpret_cast<const Weather*>(
               &_Weather_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Weather* other);
  friend void swap(Weather& a, Weather& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Weather* New() const final {
    return CreateMaybeMessage<Weather>(NULL);
  }

  Weather* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Weather>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Weather& from);
  void MergeFrom(const Weather& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weather* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .data_format.MaxMinDoublePair temperature = 1;
  bool has_temperature() const;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 1;
  private:
  const ::data_format::MaxMinDoublePair& _internal_temperature() const;
  public:
  const ::data_format::MaxMinDoublePair& temperature() const;
  ::data_format::MaxMinDoublePair* release_temperature();
  ::data_format::MaxMinDoublePair* mutable_temperature();
  void set_allocated_temperature(::data_format::MaxMinDoublePair* temperature);

  // double rainfall = 2;
  void clear_rainfall();
  static const int kRainfallFieldNumber = 2;
  double rainfall() const;
  void set_rainfall(double value);

  // @@protoc_insertion_point(class_scope:data_format.Weather)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::data_format::MaxMinDoublePair* temperature_;
  double rainfall_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_environment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Environment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_format.Environment) */ {
 public:
  Environment();
  virtual ~Environment();

  Environment(const Environment& from);

  inline Environment& operator=(const Environment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Environment(Environment&& from) noexcept
    : Environment() {
    *this = ::std::move(from);
  }

  inline Environment& operator=(Environment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Environment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Environment* internal_default_instance() {
    return reinterpret_cast<const Environment*>(
               &_Environment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Environment* other);
  friend void swap(Environment& a, Environment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Environment* New() const final {
    return CreateMaybeMessage<Environment>(NULL);
  }

  Environment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Environment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Environment& from);
  void MergeFrom(const Environment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .data_format.Config config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  private:
  const ::data_format::Config& _internal_config() const;
  public:
  const ::data_format::Config& config() const;
  ::data_format::Config* release_config();
  ::data_format::Config* mutable_config();
  void set_allocated_config(::data_format::Config* config);

  // .data_format.Climate climate = 2;
  bool has_climate() const;
  void clear_climate();
  static const int kClimateFieldNumber = 2;
  private:
  const ::data_format::Climate& _internal_climate() const;
  public:
  const ::data_format::Climate& climate() const;
  ::data_format::Climate* release_climate();
  ::data_format::Climate* mutable_climate();
  void set_allocated_climate(::data_format::Climate* climate);

  // .data_format.Terrain terrain = 4;
  bool has_terrain() const;
  void clear_terrain();
  static const int kTerrainFieldNumber = 4;
  private:
  const ::data_format::Terrain& _internal_terrain() const;
  public:
  const ::data_format::Terrain& terrain() const;
  ::data_format::Terrain* release_terrain();
  ::data_format::Terrain* mutable_terrain();
  void set_allocated_terrain(::data_format::Terrain* terrain);

  // .data_format.Weather weather = 5;
  bool has_weather() const;
  void clear_weather();
  static const int kWeatherFieldNumber = 5;
  private:
  const ::data_format::Weather& _internal_weather() const;
  public:
  const ::data_format::Weather& weather() const;
  ::data_format::Weather* release_weather();
  ::data_format::Weather* mutable_weather();
  void set_allocated_weather(::data_format::Weather* weather);

  // sint64 timestamp_epoch_count = 3;
  void clear_timestamp_epoch_count();
  static const int kTimestampEpochCountFieldNumber = 3;
  ::google::protobuf::int64 timestamp_epoch_count() const;
  void set_timestamp_epoch_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:data_format.Environment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::data_format::Config* config_;
  ::data_format::Climate* climate_;
  ::data_format::Terrain* terrain_;
  ::data_format::Weather* weather_;
  ::google::protobuf::int64 timestamp_epoch_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_environment_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MaxMinDoublePair

// double max = 1;
inline void MaxMinDoublePair::clear_max() {
  max_ = 0;
}
inline double MaxMinDoublePair::max() const {
  // @@protoc_insertion_point(field_get:data_format.MaxMinDoublePair.max)
  return max_;
}
inline void MaxMinDoublePair::set_max(double value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:data_format.MaxMinDoublePair.max)
}

// double min = 2;
inline void MaxMinDoublePair::clear_min() {
  min_ = 0;
}
inline double MaxMinDoublePair::min() const {
  // @@protoc_insertion_point(field_get:data_format.MaxMinDoublePair.min)
  return min_;
}
inline void MaxMinDoublePair::set_min(double value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:data_format.MaxMinDoublePair.min)
}

// -------------------------------------------------------------------

// Location

// double longitude_left = 1;
inline void Location::clear_longitude_left() {
  longitude_left_ = 0;
}
inline double Location::longitude_left() const {
  // @@protoc_insertion_point(field_get:data_format.Location.longitude_left)
  return longitude_left_;
}
inline void Location::set_longitude_left(double value) {
  
  longitude_left_ = value;
  // @@protoc_insertion_point(field_set:data_format.Location.longitude_left)
}

// double longitude_right = 2;
inline void Location::clear_longitude_right() {
  longitude_right_ = 0;
}
inline double Location::longitude_right() const {
  // @@protoc_insertion_point(field_get:data_format.Location.longitude_right)
  return longitude_right_;
}
inline void Location::set_longitude_right(double value) {
  
  longitude_right_ = value;
  // @@protoc_insertion_point(field_set:data_format.Location.longitude_right)
}

// double latitude_top = 3;
inline void Location::clear_latitude_top() {
  latitude_top_ = 0;
}
inline double Location::latitude_top() const {
  // @@protoc_insertion_point(field_get:data_format.Location.latitude_top)
  return latitude_top_;
}
inline void Location::set_latitude_top(double value) {
  
  latitude_top_ = value;
  // @@protoc_insertion_point(field_set:data_format.Location.latitude_top)
}

// double latitude_bottom = 4;
inline void Location::clear_latitude_bottom() {
  latitude_bottom_ = 0;
}
inline double Location::latitude_bottom() const {
  // @@protoc_insertion_point(field_get:data_format.Location.latitude_bottom)
  return latitude_bottom_;
}
inline void Location::set_latitude_bottom(double value) {
  
  latitude_bottom_ = value;
  // @@protoc_insertion_point(field_set:data_format.Location.latitude_bottom)
}

// -------------------------------------------------------------------

// Config

// string name = 1;
inline void Config::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config::name() const {
  // @@protoc_insertion_point(field_get:data_format.Config.name)
  return name_.GetNoArena();
}
inline void Config::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_format.Config.name)
}
#if LANG_CXX11
inline void Config::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_format.Config.name)
}
#endif
inline void Config::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_format.Config.name)
}
inline void Config::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_format.Config.name)
}
inline ::std::string* Config::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:data_format.Config.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_name() {
  // @@protoc_insertion_point(field_release:data_format.Config.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:data_format.Config.name)
}

// .data_format.Location location = 2;
inline bool Config::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void Config::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
inline const ::data_format::Location& Config::_internal_location() const {
  return *location_;
}
inline const ::data_format::Location& Config::location() const {
  const ::data_format::Location* p = location_;
  // @@protoc_insertion_point(field_get:data_format.Config.location)
  return p != NULL ? *p : *reinterpret_cast<const ::data_format::Location*>(
      &::data_format::_Location_default_instance_);
}
inline ::data_format::Location* Config::release_location() {
  // @@protoc_insertion_point(field_release:data_format.Config.location)
  
  ::data_format::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::data_format::Location* Config::mutable_location() {
  
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::data_format::Location>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_format.Config.location)
  return location_;
}
inline void Config::set_allocated_location(::data_format::Location* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:data_format.Config.location)
}

// -------------------------------------------------------------------

// Climate

// .data_format.Climate.ZoneType climate_zone = 1;
inline void Climate::clear_climate_zone() {
  climate_zone_ = 0;
}
inline ::data_format::Climate_ZoneType Climate::climate_zone() const {
  // @@protoc_insertion_point(field_get:data_format.Climate.climate_zone)
  return static_cast< ::data_format::Climate_ZoneType >(climate_zone_);
}
inline void Climate::set_climate_zone(::data_format::Climate_ZoneType value) {
  
  climate_zone_ = value;
  // @@protoc_insertion_point(field_set:data_format.Climate.climate_zone)
}

// .data_format.MaxMinDoublePair yearly_temperature = 2;
inline bool Climate::has_yearly_temperature() const {
  return this != internal_default_instance() && yearly_temperature_ != NULL;
}
inline void Climate::clear_yearly_temperature() {
  if (GetArenaNoVirtual() == NULL && yearly_temperature_ != NULL) {
    delete yearly_temperature_;
  }
  yearly_temperature_ = NULL;
}
inline const ::data_format::MaxMinDoublePair& Climate::_internal_yearly_temperature() const {
  return *yearly_temperature_;
}
inline const ::data_format::MaxMinDoublePair& Climate::yearly_temperature() const {
  const ::data_format::MaxMinDoublePair* p = yearly_temperature_;
  // @@protoc_insertion_point(field_get:data_format.Climate.yearly_temperature)
  return p != NULL ? *p : *reinterpret_cast<const ::data_format::MaxMinDoublePair*>(
      &::data_format::_MaxMinDoublePair_default_instance_);
}
inline ::data_format::MaxMinDoublePair* Climate::release_yearly_temperature() {
  // @@protoc_insertion_point(field_release:data_format.Climate.yearly_temperature)
  
  ::data_format::MaxMinDoublePair* temp = yearly_temperature_;
  yearly_temperature_ = NULL;
  return temp;
}
inline ::data_format::MaxMinDoublePair* Climate::mutable_yearly_temperature() {
  
  if (yearly_temperature_ == NULL) {
    auto* p = CreateMaybeMessage<::data_format::MaxMinDoublePair>(GetArenaNoVirtual());
    yearly_temperature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_format.Climate.yearly_temperature)
  return yearly_temperature_;
}
inline void Climate::set_allocated_yearly_temperature(::data_format::MaxMinDoublePair* yearly_temperature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete yearly_temperature_;
  }
  if (yearly_temperature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      yearly_temperature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, yearly_temperature, submessage_arena);
    }
    
  } else {
    
  }
  yearly_temperature_ = yearly_temperature;
  // @@protoc_insertion_point(field_set_allocated:data_format.Climate.yearly_temperature)
}

// .data_format.MaxMinDoublePair yearly_rainfall = 3;
inline bool Climate::has_yearly_rainfall() const {
  return this != internal_default_instance() && yearly_rainfall_ != NULL;
}
inline void Climate::clear_yearly_rainfall() {
  if (GetArenaNoVirtual() == NULL && yearly_rainfall_ != NULL) {
    delete yearly_rainfall_;
  }
  yearly_rainfall_ = NULL;
}
inline const ::data_format::MaxMinDoublePair& Climate::_internal_yearly_rainfall() const {
  return *yearly_rainfall_;
}
inline const ::data_format::MaxMinDoublePair& Climate::yearly_rainfall() const {
  const ::data_format::MaxMinDoublePair* p = yearly_rainfall_;
  // @@protoc_insertion_point(field_get:data_format.Climate.yearly_rainfall)
  return p != NULL ? *p : *reinterpret_cast<const ::data_format::MaxMinDoublePair*>(
      &::data_format::_MaxMinDoublePair_default_instance_);
}
inline ::data_format::MaxMinDoublePair* Climate::release_yearly_rainfall() {
  // @@protoc_insertion_point(field_release:data_format.Climate.yearly_rainfall)
  
  ::data_format::MaxMinDoublePair* temp = yearly_rainfall_;
  yearly_rainfall_ = NULL;
  return temp;
}
inline ::data_format::MaxMinDoublePair* Climate::mutable_yearly_rainfall() {
  
  if (yearly_rainfall_ == NULL) {
    auto* p = CreateMaybeMessage<::data_format::MaxMinDoublePair>(GetArenaNoVirtual());
    yearly_rainfall_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_format.Climate.yearly_rainfall)
  return yearly_rainfall_;
}
inline void Climate::set_allocated_yearly_rainfall(::data_format::MaxMinDoublePair* yearly_rainfall) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete yearly_rainfall_;
  }
  if (yearly_rainfall) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      yearly_rainfall = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, yearly_rainfall, submessage_arena);
    }
    
  } else {
    
  }
  yearly_rainfall_ = yearly_rainfall;
  // @@protoc_insertion_point(field_set_allocated:data_format.Climate.yearly_rainfall)
}

// -------------------------------------------------------------------

// Plant

// string type_name = 1;
inline void Plant::clear_type_name() {
  type_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant::type_name() const {
  // @@protoc_insertion_point(field_get:data_format.Plant.type_name)
  return type_name_.GetNoArena();
}
inline void Plant::set_type_name(const ::std::string& value) {
  
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_format.Plant.type_name)
}
#if LANG_CXX11
inline void Plant::set_type_name(::std::string&& value) {
  
  type_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_format.Plant.type_name)
}
#endif
inline void Plant::set_type_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_format.Plant.type_name)
}
inline void Plant::set_type_name(const char* value, size_t size) {
  
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_format.Plant.type_name)
}
inline ::std::string* Plant::mutable_type_name() {
  
  // @@protoc_insertion_point(field_mutable:data_format.Plant.type_name)
  return type_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant::release_type_name() {
  // @@protoc_insertion_point(field_release:data_format.Plant.type_name)
  
  return type_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant::set_allocated_type_name(::std::string* type_name) {
  if (type_name != NULL) {
    
  } else {
    
  }
  type_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_name);
  // @@protoc_insertion_point(field_set_allocated:data_format.Plant.type_name)
}

// uint32 health = 2;
inline void Plant::clear_health() {
  health_ = 0u;
}
inline ::google::protobuf::uint32 Plant::health() const {
  // @@protoc_insertion_point(field_get:data_format.Plant.health)
  return health_;
}
inline void Plant::set_health(::google::protobuf::uint32 value) {
  
  health_ = value;
  // @@protoc_insertion_point(field_set:data_format.Plant.health)
}

// bool flowering = 3;
inline void Plant::clear_flowering() {
  flowering_ = false;
}
inline bool Plant::flowering() const {
  // @@protoc_insertion_point(field_get:data_format.Plant.flowering)
  return flowering_;
}
inline void Plant::set_flowering(bool value) {
  
  flowering_ = value;
  // @@protoc_insertion_point(field_set:data_format.Plant.flowering)
}

// int64 accumulated_gdd = 4;
inline void Plant::clear_accumulated_gdd() {
  accumulated_gdd_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Plant::accumulated_gdd() const {
  // @@protoc_insertion_point(field_get:data_format.Plant.accumulated_gdd)
  return accumulated_gdd_;
}
inline void Plant::set_accumulated_gdd(::google::protobuf::int64 value) {
  
  accumulated_gdd_ = value;
  // @@protoc_insertion_point(field_set:data_format.Plant.accumulated_gdd)
}

// .data_format.Plant.Maturity maturity = 5;
inline void Plant::clear_maturity() {
  maturity_ = 0;
}
inline ::data_format::Plant_Maturity Plant::maturity() const {
  // @@protoc_insertion_point(field_get:data_format.Plant.maturity)
  return static_cast< ::data_format::Plant_Maturity >(maturity_);
}
inline void Plant::set_maturity(::data_format::Plant_Maturity value) {
  
  maturity_ = value;
  // @@protoc_insertion_point(field_set:data_format.Plant.maturity)
}

// double base_temperature = 6;
inline void Plant::clear_base_temperature() {
  base_temperature_ = 0;
}
inline double Plant::base_temperature() const {
  // @@protoc_insertion_point(field_get:data_format.Plant.base_temperature)
  return base_temperature_;
}
inline void Plant::set_base_temperature(double value) {
  
  base_temperature_ = value;
  // @@protoc_insertion_point(field_set:data_format.Plant.base_temperature)
}

// repeated int64 gdd_thresholds = 7;
inline int Plant::gdd_thresholds_size() const {
  return gdd_thresholds_.size();
}
inline void Plant::clear_gdd_thresholds() {
  gdd_thresholds_.Clear();
}
inline ::google::protobuf::int64 Plant::gdd_thresholds(int index) const {
  // @@protoc_insertion_point(field_get:data_format.Plant.gdd_thresholds)
  return gdd_thresholds_.Get(index);
}
inline void Plant::set_gdd_thresholds(int index, ::google::protobuf::int64 value) {
  gdd_thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:data_format.Plant.gdd_thresholds)
}
inline void Plant::add_gdd_thresholds(::google::protobuf::int64 value) {
  gdd_thresholds_.Add(value);
  // @@protoc_insertion_point(field_add:data_format.Plant.gdd_thresholds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Plant::gdd_thresholds() const {
  // @@protoc_insertion_point(field_list:data_format.Plant.gdd_thresholds)
  return gdd_thresholds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Plant::mutable_gdd_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:data_format.Plant.gdd_thresholds)
  return &gdd_thresholds_;
}

// -------------------------------------------------------------------

// Soil_Nutrients

// double nitrogen = 1;
inline void Soil_Nutrients::clear_nitrogen() {
  nitrogen_ = 0;
}
inline double Soil_Nutrients::nitrogen() const {
  // @@protoc_insertion_point(field_get:data_format.Soil.Nutrients.nitrogen)
  return nitrogen_;
}
inline void Soil_Nutrients::set_nitrogen(double value) {
  
  nitrogen_ = value;
  // @@protoc_insertion_point(field_set:data_format.Soil.Nutrients.nitrogen)
}

// double phosphorus = 2;
inline void Soil_Nutrients::clear_phosphorus() {
  phosphorus_ = 0;
}
inline double Soil_Nutrients::phosphorus() const {
  // @@protoc_insertion_point(field_get:data_format.Soil.Nutrients.phosphorus)
  return phosphorus_;
}
inline void Soil_Nutrients::set_phosphorus(double value) {
  
  phosphorus_ = value;
  // @@protoc_insertion_point(field_set:data_format.Soil.Nutrients.phosphorus)
}

// double potassium = 3;
inline void Soil_Nutrients::clear_potassium() {
  potassium_ = 0;
}
inline double Soil_Nutrients::potassium() const {
  // @@protoc_insertion_point(field_get:data_format.Soil.Nutrients.potassium)
  return potassium_;
}
inline void Soil_Nutrients::set_potassium(double value) {
  
  potassium_ = value;
  // @@protoc_insertion_point(field_set:data_format.Soil.Nutrients.potassium)
}

// double calcium = 4;
inline void Soil_Nutrients::clear_calcium() {
  calcium_ = 0;
}
inline double Soil_Nutrients::calcium() const {
  // @@protoc_insertion_point(field_get:data_format.Soil.Nutrients.calcium)
  return calcium_;
}
inline void Soil_Nutrients::set_calcium(double value) {
  
  calcium_ = value;
  // @@protoc_insertion_point(field_set:data_format.Soil.Nutrients.calcium)
}

// double magnesium = 5;
inline void Soil_Nutrients::clear_magnesium() {
  magnesium_ = 0;
}
inline double Soil_Nutrients::magnesium() const {
  // @@protoc_insertion_point(field_get:data_format.Soil.Nutrients.magnesium)
  return magnesium_;
}
inline void Soil_Nutrients::set_magnesium(double value) {
  
  magnesium_ = value;
  // @@protoc_insertion_point(field_set:data_format.Soil.Nutrients.magnesium)
}

// double sulfur = 6;
inline void Soil_Nutrients::clear_sulfur() {
  sulfur_ = 0;
}
inline double Soil_Nutrients::sulfur() const {
  // @@protoc_insertion_point(field_get:data_format.Soil.Nutrients.sulfur)
  return sulfur_;
}
inline void Soil_Nutrients::set_sulfur(double value) {
  
  sulfur_ = value;
  // @@protoc_insertion_point(field_set:data_format.Soil.Nutrients.sulfur)
}

// -------------------------------------------------------------------

// Soil

// .data_format.Soil.Texture texture = 1;
inline void Soil::clear_texture() {
  texture_ = 0;
}
inline ::data_format::Soil_Texture Soil::texture() const {
  // @@protoc_insertion_point(field_get:data_format.Soil.texture)
  return static_cast< ::data_format::Soil_Texture >(texture_);
}
inline void Soil::set_texture(::data_format::Soil_Texture value) {
  
  texture_ = value;
  // @@protoc_insertion_point(field_set:data_format.Soil.texture)
}

// double pH = 2;
inline void Soil::clear_ph() {
  ph_ = 0;
}
inline double Soil::ph() const {
  // @@protoc_insertion_point(field_get:data_format.Soil.pH)
  return ph_;
}
inline void Soil::set_ph(double value) {
  
  ph_ = value;
  // @@protoc_insertion_point(field_set:data_format.Soil.pH)
}

// double salinity = 3;
inline void Soil::clear_salinity() {
  salinity_ = 0;
}
inline double Soil::salinity() const {
  // @@protoc_insertion_point(field_get:data_format.Soil.salinity)
  return salinity_;
}
inline void Soil::set_salinity(double value) {
  
  salinity_ = value;
  // @@protoc_insertion_point(field_set:data_format.Soil.salinity)
}

// double organic_matter = 4;
inline void Soil::clear_organic_matter() {
  organic_matter_ = 0;
}
inline double Soil::organic_matter() const {
  // @@protoc_insertion_point(field_get:data_format.Soil.organic_matter)
  return organic_matter_;
}
inline void Soil::set_organic_matter(double value) {
  
  organic_matter_ = value;
  // @@protoc_insertion_point(field_set:data_format.Soil.organic_matter)
}

// double water_content = 5;
inline void Soil::clear_water_content() {
  water_content_ = 0;
}
inline double Soil::water_content() const {
  // @@protoc_insertion_point(field_get:data_format.Soil.water_content)
  return water_content_;
}
inline void Soil::set_water_content(double value) {
  
  water_content_ = value;
  // @@protoc_insertion_point(field_set:data_format.Soil.water_content)
}

// -------------------------------------------------------------------

// Terrain_Cell

// uint64 size = 1;
inline void Terrain_Cell::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Terrain_Cell::size() const {
  // @@protoc_insertion_point(field_get:data_format.Terrain.Cell.size)
  return size_;
}
inline void Terrain_Cell::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:data_format.Terrain.Cell.size)
}

// .data_format.Plant plant = 2;
inline bool Terrain_Cell::has_plant() const {
  return oneof_plant_case() == kPlant;
}
inline void Terrain_Cell::set_has_plant() {
  _oneof_case_[0] = kPlant;
}
inline void Terrain_Cell::clear_plant() {
  if (has_plant()) {
    delete oneof_plant_.plant_;
    clear_has_oneof_plant();
  }
}
inline const ::data_format::Plant& Terrain_Cell::_internal_plant() const {
  return *oneof_plant_.plant_;
}
inline ::data_format::Plant* Terrain_Cell::release_plant() {
  // @@protoc_insertion_point(field_release:data_format.Terrain.Cell.plant)
  if (has_plant()) {
    clear_has_oneof_plant();
      ::data_format::Plant* temp = oneof_plant_.plant_;
    oneof_plant_.plant_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::data_format::Plant& Terrain_Cell::plant() const {
  // @@protoc_insertion_point(field_get:data_format.Terrain.Cell.plant)
  return has_plant()
      ? *oneof_plant_.plant_
      : *reinterpret_cast< ::data_format::Plant*>(&::data_format::_Plant_default_instance_);
}
inline ::data_format::Plant* Terrain_Cell::mutable_plant() {
  if (!has_plant()) {
    clear_oneof_plant();
    set_has_plant();
    oneof_plant_.plant_ = CreateMaybeMessage< ::data_format::Plant >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:data_format.Terrain.Cell.plant)
  return oneof_plant_.plant_;
}

// .data_format.Soil soil = 3;
inline bool Terrain_Cell::has_soil() const {
  return this != internal_default_instance() && soil_ != NULL;
}
inline void Terrain_Cell::clear_soil() {
  if (GetArenaNoVirtual() == NULL && soil_ != NULL) {
    delete soil_;
  }
  soil_ = NULL;
}
inline const ::data_format::Soil& Terrain_Cell::_internal_soil() const {
  return *soil_;
}
inline const ::data_format::Soil& Terrain_Cell::soil() const {
  const ::data_format::Soil* p = soil_;
  // @@protoc_insertion_point(field_get:data_format.Terrain.Cell.soil)
  return p != NULL ? *p : *reinterpret_cast<const ::data_format::Soil*>(
      &::data_format::_Soil_default_instance_);
}
inline ::data_format::Soil* Terrain_Cell::release_soil() {
  // @@protoc_insertion_point(field_release:data_format.Terrain.Cell.soil)
  
  ::data_format::Soil* temp = soil_;
  soil_ = NULL;
  return temp;
}
inline ::data_format::Soil* Terrain_Cell::mutable_soil() {
  
  if (soil_ == NULL) {
    auto* p = CreateMaybeMessage<::data_format::Soil>(GetArenaNoVirtual());
    soil_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_format.Terrain.Cell.soil)
  return soil_;
}
inline void Terrain_Cell::set_allocated_soil(::data_format::Soil* soil) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete soil_;
  }
  if (soil) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      soil = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, soil, submessage_arena);
    }
    
  } else {
    
  }
  soil_ = soil;
  // @@protoc_insertion_point(field_set_allocated:data_format.Terrain.Cell.soil)
}

inline bool Terrain_Cell::has_oneof_plant() const {
  return oneof_plant_case() != ONEOF_PLANT_NOT_SET;
}
inline void Terrain_Cell::clear_has_oneof_plant() {
  _oneof_case_[0] = ONEOF_PLANT_NOT_SET;
}
inline Terrain_Cell::OneofPlantCase Terrain_Cell::oneof_plant_case() const {
  return Terrain_Cell::OneofPlantCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Terrain_Row

// repeated .data_format.Terrain.Cell cells = 1;
inline int Terrain_Row::cells_size() const {
  return cells_.size();
}
inline void Terrain_Row::clear_cells() {
  cells_.Clear();
}
inline ::data_format::Terrain_Cell* Terrain_Row::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:data_format.Terrain.Row.cells)
  return cells_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::data_format::Terrain_Cell >*
Terrain_Row::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:data_format.Terrain.Row.cells)
  return &cells_;
}
inline const ::data_format::Terrain_Cell& Terrain_Row::cells(int index) const {
  // @@protoc_insertion_point(field_get:data_format.Terrain.Row.cells)
  return cells_.Get(index);
}
inline ::data_format::Terrain_Cell* Terrain_Row::add_cells() {
  // @@protoc_insertion_point(field_add:data_format.Terrain.Row.cells)
  return cells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::data_format::Terrain_Cell >&
Terrain_Row::cells() const {
  // @@protoc_insertion_point(field_list:data_format.Terrain.Row.cells)
  return cells_;
}

// -------------------------------------------------------------------

// Terrain

// repeated .data_format.Terrain.Row tiles = 1;
inline int Terrain::tiles_size() const {
  return tiles_.size();
}
inline void Terrain::clear_tiles() {
  tiles_.Clear();
}
inline ::data_format::Terrain_Row* Terrain::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:data_format.Terrain.tiles)
  return tiles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::data_format::Terrain_Row >*
Terrain::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:data_format.Terrain.tiles)
  return &tiles_;
}
inline const ::data_format::Terrain_Row& Terrain::tiles(int index) const {
  // @@protoc_insertion_point(field_get:data_format.Terrain.tiles)
  return tiles_.Get(index);
}
inline ::data_format::Terrain_Row* Terrain::add_tiles() {
  // @@protoc_insertion_point(field_add:data_format.Terrain.tiles)
  return tiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::data_format::Terrain_Row >&
Terrain::tiles() const {
  // @@protoc_insertion_point(field_list:data_format.Terrain.tiles)
  return tiles_;
}

// -------------------------------------------------------------------

// Weather

// .data_format.MaxMinDoublePair temperature = 1;
inline bool Weather::has_temperature() const {
  return this != internal_default_instance() && temperature_ != NULL;
}
inline void Weather::clear_temperature() {
  if (GetArenaNoVirtual() == NULL && temperature_ != NULL) {
    delete temperature_;
  }
  temperature_ = NULL;
}
inline const ::data_format::MaxMinDoublePair& Weather::_internal_temperature() const {
  return *temperature_;
}
inline const ::data_format::MaxMinDoublePair& Weather::temperature() const {
  const ::data_format::MaxMinDoublePair* p = temperature_;
  // @@protoc_insertion_point(field_get:data_format.Weather.temperature)
  return p != NULL ? *p : *reinterpret_cast<const ::data_format::MaxMinDoublePair*>(
      &::data_format::_MaxMinDoublePair_default_instance_);
}
inline ::data_format::MaxMinDoublePair* Weather::release_temperature() {
  // @@protoc_insertion_point(field_release:data_format.Weather.temperature)
  
  ::data_format::MaxMinDoublePair* temp = temperature_;
  temperature_ = NULL;
  return temp;
}
inline ::data_format::MaxMinDoublePair* Weather::mutable_temperature() {
  
  if (temperature_ == NULL) {
    auto* p = CreateMaybeMessage<::data_format::MaxMinDoublePair>(GetArenaNoVirtual());
    temperature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_format.Weather.temperature)
  return temperature_;
}
inline void Weather::set_allocated_temperature(::data_format::MaxMinDoublePair* temperature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete temperature_;
  }
  if (temperature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      temperature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, temperature, submessage_arena);
    }
    
  } else {
    
  }
  temperature_ = temperature;
  // @@protoc_insertion_point(field_set_allocated:data_format.Weather.temperature)
}

// double rainfall = 2;
inline void Weather::clear_rainfall() {
  rainfall_ = 0;
}
inline double Weather::rainfall() const {
  // @@protoc_insertion_point(field_get:data_format.Weather.rainfall)
  return rainfall_;
}
inline void Weather::set_rainfall(double value) {
  
  rainfall_ = value;
  // @@protoc_insertion_point(field_set:data_format.Weather.rainfall)
}

// -------------------------------------------------------------------

// Environment

// .data_format.Config config = 1;
inline bool Environment::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Environment::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::data_format::Config& Environment::_internal_config() const {
  return *config_;
}
inline const ::data_format::Config& Environment::config() const {
  const ::data_format::Config* p = config_;
  // @@protoc_insertion_point(field_get:data_format.Environment.config)
  return p != NULL ? *p : *reinterpret_cast<const ::data_format::Config*>(
      &::data_format::_Config_default_instance_);
}
inline ::data_format::Config* Environment::release_config() {
  // @@protoc_insertion_point(field_release:data_format.Environment.config)
  
  ::data_format::Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::data_format::Config* Environment::mutable_config() {
  
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::data_format::Config>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_format.Environment.config)
  return config_;
}
inline void Environment::set_allocated_config(::data_format::Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:data_format.Environment.config)
}

// .data_format.Climate climate = 2;
inline bool Environment::has_climate() const {
  return this != internal_default_instance() && climate_ != NULL;
}
inline void Environment::clear_climate() {
  if (GetArenaNoVirtual() == NULL && climate_ != NULL) {
    delete climate_;
  }
  climate_ = NULL;
}
inline const ::data_format::Climate& Environment::_internal_climate() const {
  return *climate_;
}
inline const ::data_format::Climate& Environment::climate() const {
  const ::data_format::Climate* p = climate_;
  // @@protoc_insertion_point(field_get:data_format.Environment.climate)
  return p != NULL ? *p : *reinterpret_cast<const ::data_format::Climate*>(
      &::data_format::_Climate_default_instance_);
}
inline ::data_format::Climate* Environment::release_climate() {
  // @@protoc_insertion_point(field_release:data_format.Environment.climate)
  
  ::data_format::Climate* temp = climate_;
  climate_ = NULL;
  return temp;
}
inline ::data_format::Climate* Environment::mutable_climate() {
  
  if (climate_ == NULL) {
    auto* p = CreateMaybeMessage<::data_format::Climate>(GetArenaNoVirtual());
    climate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_format.Environment.climate)
  return climate_;
}
inline void Environment::set_allocated_climate(::data_format::Climate* climate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete climate_;
  }
  if (climate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      climate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, climate, submessage_arena);
    }
    
  } else {
    
  }
  climate_ = climate;
  // @@protoc_insertion_point(field_set_allocated:data_format.Environment.climate)
}

// sint64 timestamp_epoch_count = 3;
inline void Environment::clear_timestamp_epoch_count() {
  timestamp_epoch_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Environment::timestamp_epoch_count() const {
  // @@protoc_insertion_point(field_get:data_format.Environment.timestamp_epoch_count)
  return timestamp_epoch_count_;
}
inline void Environment::set_timestamp_epoch_count(::google::protobuf::int64 value) {
  
  timestamp_epoch_count_ = value;
  // @@protoc_insertion_point(field_set:data_format.Environment.timestamp_epoch_count)
}

// .data_format.Terrain terrain = 4;
inline bool Environment::has_terrain() const {
  return this != internal_default_instance() && terrain_ != NULL;
}
inline void Environment::clear_terrain() {
  if (GetArenaNoVirtual() == NULL && terrain_ != NULL) {
    delete terrain_;
  }
  terrain_ = NULL;
}
inline const ::data_format::Terrain& Environment::_internal_terrain() const {
  return *terrain_;
}
inline const ::data_format::Terrain& Environment::terrain() const {
  const ::data_format::Terrain* p = terrain_;
  // @@protoc_insertion_point(field_get:data_format.Environment.terrain)
  return p != NULL ? *p : *reinterpret_cast<const ::data_format::Terrain*>(
      &::data_format::_Terrain_default_instance_);
}
inline ::data_format::Terrain* Environment::release_terrain() {
  // @@protoc_insertion_point(field_release:data_format.Environment.terrain)
  
  ::data_format::Terrain* temp = terrain_;
  terrain_ = NULL;
  return temp;
}
inline ::data_format::Terrain* Environment::mutable_terrain() {
  
  if (terrain_ == NULL) {
    auto* p = CreateMaybeMessage<::data_format::Terrain>(GetArenaNoVirtual());
    terrain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_format.Environment.terrain)
  return terrain_;
}
inline void Environment::set_allocated_terrain(::data_format::Terrain* terrain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete terrain_;
  }
  if (terrain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      terrain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, terrain, submessage_arena);
    }
    
  } else {
    
  }
  terrain_ = terrain;
  // @@protoc_insertion_point(field_set_allocated:data_format.Environment.terrain)
}

// .data_format.Weather weather = 5;
inline bool Environment::has_weather() const {
  return this != internal_default_instance() && weather_ != NULL;
}
inline void Environment::clear_weather() {
  if (GetArenaNoVirtual() == NULL && weather_ != NULL) {
    delete weather_;
  }
  weather_ = NULL;
}
inline const ::data_format::Weather& Environment::_internal_weather() const {
  return *weather_;
}
inline const ::data_format::Weather& Environment::weather() const {
  const ::data_format::Weather* p = weather_;
  // @@protoc_insertion_point(field_get:data_format.Environment.weather)
  return p != NULL ? *p : *reinterpret_cast<const ::data_format::Weather*>(
      &::data_format::_Weather_default_instance_);
}
inline ::data_format::Weather* Environment::release_weather() {
  // @@protoc_insertion_point(field_release:data_format.Environment.weather)
  
  ::data_format::Weather* temp = weather_;
  weather_ = NULL;
  return temp;
}
inline ::data_format::Weather* Environment::mutable_weather() {
  
  if (weather_ == NULL) {
    auto* p = CreateMaybeMessage<::data_format::Weather>(GetArenaNoVirtual());
    weather_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_format.Environment.weather)
  return weather_;
}
inline void Environment::set_allocated_weather(::data_format::Weather* weather) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weather_;
  }
  if (weather) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weather = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weather, submessage_arena);
    }
    
  } else {
    
  }
  weather_ = weather;
  // @@protoc_insertion_point(field_set_allocated:data_format.Environment.weather)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data_format

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::data_format::Climate_ZoneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::data_format::Climate_ZoneType>() {
  return ::data_format::Climate_ZoneType_descriptor();
}
template <> struct is_proto_enum< ::data_format::Plant_Maturity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::data_format::Plant_Maturity>() {
  return ::data_format::Plant_Maturity_descriptor();
}
template <> struct is_proto_enum< ::data_format::Soil_Texture> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::data_format::Soil_Texture>() {
  return ::data_format::Soil_Texture_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_environment_2eproto
